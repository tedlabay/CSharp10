Snippets Module 6
-----------------


public override void IncreaseStock(int amount)
{

	//it is possible to call the base here too, but we are assuming that this is handled differently

	int newStock = AmountInStock + amount * AmountPerBox;

	if (newStock <= maxItemsInStock)
	{
		AmountInStock += amount * AmountPerBox;
	}
	else
	{
		AmountInStock = maxItemsInStock;//we only store the possible items, overstock isn't stored
		Log($"{CreateSimpleProductRepresentation} stock overflow. {newStock - AmountInStock} item(s) ordere that couldn't be stored.");
	}

	if (AmountInStock > StockThreshold)
	{
		IsBelowStockThreshold = false;
	}
}


-------------------------------------------------------------------------------------


public override string DisplayDetailsFull()
{
	//Console.WriteLine(name);
	StringBuilder sb = new StringBuilder();

	sb.Append("Boxed Product\n");

	sb.Append($"{Id} {Name} \n{Description}\n{Price}\n{AmountInStock} item(s) in stock");

	if (IsBelowStockThreshold)
	{
		sb.Append("\n!!STOCK LOW!!");
	}

	return sb.ToString();
}
		
	
-------------------------------------------------------------------------------------

	
		
private static void ShowCreateNewProduct()
{
	UnitType unitType = UnitType.PerItem;//default

	Console.WriteLine("What type of product do you want to create?");
	Console.WriteLine("1. Regular product\n2. Bulk product\n3. Fresh product\n4. Boxed product");
	Console.Write("Your selection: ");

	var productType = Console.ReadLine();
	if (productType != "1" && productType != "2" && productType != "3"
		&& productType != "4")
	{
		Console.WriteLine("Invalid selection!");
		return;
	}

	Product? newProduct = null;

	Console.Write("Enter the name of the product: ");
	string name = Console.ReadLine() ?? string.Empty;

	Console.Write("Enter the price of the product: ");
	double price = double.Parse(Console.ReadLine() ?? "0.0");

	ShowAllCurrencies();
	Console.Write("Select the currency: ");
	Currency currency = (Currency)Enum.Parse(typeof(Currency), Console.ReadLine() ?? "1");

	Console.Write("Enter the description of the product: ");
	string description = Console.ReadLine() ?? string.Empty;


	if (productType == "1")
	{
		ShowAllUnitTypes();
		Console.Write("Select the unit type: ");
		unitType = (UnitType)Enum.Parse(typeof(UnitType), Console.ReadLine() ?? "1");
	}

	Console.Write("Enter the maximum number of items in stock for this product: ");
	int maxInStock = int.Parse(Console.ReadLine() ?? "0");

	int newId = inventory.Max(p => p.Id) + 1;//find highest id and increase with 1

	switch (productType)
	{
		case "1":
			newProduct = new Product(newId, name, description, new Price() { ItemPrice = price, Currency = currency }, unitType, maxInStock);
			break;

		case "2":
			newProduct = new BulkProduct(newId++, name, description, new Price() { ItemPrice = price, Currency = currency }, maxInStock);
			break;

		case "3":

			newProduct = new FreshProduct(newId++, name, description, new Price() { ItemPrice = price, Currency = currency }, unitType, maxInStock);

			break;

		case "4":
			Console.Write("Enter the number of items per box: ");
			int numberInBox = int.Parse(Console.ReadLine() ?? "0");

			newProduct = new BoxedProduct(newId++, name, description, new Price() { ItemPrice = price, Currency = currency }, maxInStock, numberInBox);
			break;
	}

	if (newProduct != null)
		inventory.Add(newProduct);
}

private static void ShowAllUnitTypes()
{
	int i = 1;
	foreach (string name in Enum.GetNames(typeof(UnitType)))
	{
		Console.WriteLine($"{i}. {name}");
		i++;
	}
}

private static void ShowAllCurrencies()
{
	int i = 1;
	foreach (string name in Enum.GetNames(typeof(Currency)))
	{
		Console.WriteLine($"{i}. {name}");
		i++;
	}
}


-------------------------------------------------------------------------------------



List<Product> products = new List<Product>();

string path = $"{directory}{productsFileName}";
try
{
	CheckForExistingProductFile();

	string[] productsAsString = File.ReadAllLines(path);
	for (int i = 0; i < productsAsString.Length; i++)
	{
		string[] productSplits = productsAsString[i].Split(';');

		bool success = int.TryParse(productSplits[0], out int productId);
		if (!success)
		{
			productId = 0;
		}

		string name = productSplits[1];
		string description = productSplits[2];

		success = int.TryParse(productSplits[3], out int maxItemsInStock);
		if (!success)
		{
			maxItemsInStock = 100;//default value
		}

		success = int.TryParse(productSplits[4], out int itemPrice);
		if (!success)
		{
			itemPrice = 0;//default value
		}

		success = Enum.TryParse(productSplits[5], out Currency currency);
		if (!success)
		{
			currency = Currency.Dollar;//default value
		}


		success = Enum.TryParse(productSplits[6], out UnitType unitType);
		if (!success)
		{
			unitType = UnitType.PerItem;//default value
		}

		string productType = productSplits[7];

		Product product = null;

		switch (productType)
		{
			case "1":
				success = int.TryParse(productSplits[8], out int amountPerBox);
				if (!success)
				{
					amountPerBox = 1;//default value
				}

				product = new BoxedProduct(productId, name, description, new Price() { ItemPrice = itemPrice, Currency = currency }, maxItemsInStock, amountPerBox);
				break;

			case "2":
				product = new FreshProduct(productId, name, description, new Price() { ItemPrice = itemPrice, Currency = currency }, unitType, maxItemsInStock);
				break;
			case "3":
				product = new BulkProduct(productId, name, description, new Price() { ItemPrice = itemPrice, Currency = currency }, maxItemsInStock);
				break;
			case "4":
				product = new Product(productId, name, description, new Price() { ItemPrice = itemPrice, Currency = currency }, unitType, maxItemsInStock);
				break;
		}

		//Product product = new Product(productId, name, description, new Price() { ItemPrice = itemPrice, Currency = currency }, unitType, maxItemsInStock);


		products.Add(product);



-------------------------------------------------------------------------------------



static double dollarToEuro = 0.92;
static double euroToDollar = 1.11;

static double poundToEuro = 1.14;
static double euroToPound = 0.88;

static double dollarToPound = 0.81;
static double poundToDollar = 1.14;

public static double ConvertProductPrice(this Product product, Currency targetCurrency)
{
	Currency sourceCurrency = product.Price.Currency;
	double originalPrice = product.Price.ItemPrice;
	double convertedPrice = 0.0;

	if (sourceCurrency == Currency.Dollar && targetCurrency == Currency.Euro)
	{
		convertedPrice = originalPrice * dollarToEuro;
	}
	else if (sourceCurrency == Currency.Euro && targetCurrency == Currency.Dollar)
	{
		convertedPrice = originalPrice * euroToDollar;
	}
	else if (sourceCurrency == Currency.Pound && targetCurrency == Currency.Euro)
	{
		convertedPrice = originalPrice * poundToEuro;
	}
	else if (sourceCurrency == Currency.Euro && targetCurrency == Currency.Pound)
	{
		convertedPrice = originalPrice * euroToPound;
	}
	else if (sourceCurrency == Currency.Dollar && targetCurrency == Currency.Pound)
	{
		convertedPrice = originalPrice * dollarToPound;
	}
	else if (sourceCurrency == Currency.Pound && targetCurrency == Currency.Dollar)
	{
		convertedPrice = originalPrice * poundToDollar;
	}
	else
	{
		convertedPrice = originalPrice;
	}

	return convertedPrice;
} 
