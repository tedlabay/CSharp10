Snippets Module 4
-----------------

public enum UnitType
{
	PerItem,
	PerBox,
	PerKg
}


-------------------------------------------------------------------------------------

public void UseProduct(int items)
{
	if (items <= amountInStock)
	{
		//use the items
		amountInStock -= items;

		UpdateLowStock();

		Log($"Amount in stock updated. Now {amountInStock} items in stock.");
	}
	else
	{
		Log($"Not enough items on stock for {CreateSimpleProductRepresentation()}. {amountInStock} available but {items} requested.");
	}
}

public void IncreaseStock()
{
	amountInStock++;
}

private void DecreaseStock(int items, string reason)
{
	if (items <= amountInStock)
	{
		//decrease the stock with the specified number items
		amountInStock -= items;
	}
	else
	{
		amountInStock = 0;
	}

	UpdateLowStock();

	Log(reason);
}

public string DisplayDetailsShort()
{
	return $"{id}. {name} \n{amountInStock} items in stock";
}

public string DisplayDetailsFull()
{
	StringBuilder sb = new();
	//ToDo: add price here too
	sb.Append($"{id} {name} \n{description}\n{amountInStock} item(s) in stock");

	if (isBelowStockThreshold)
	{
		sb.Append("\n!!STOCK LOW!!");
	}

	return sb.ToString();

}

private void UpdateLowStock()
{
	if (amountInStock < 10)//for now a fixed value
	{
		isBelowStockThreshold = true;
	}
}

private void Log(string message)
{
	//this could be written to a file
	Console.WriteLine(message);
}

private string CreateSimpleProductRepresentation()
{
	return $"Product {id} ({name})";
}


-------------------------------------------------------------------------------------



public string Name
{
	get { return name; }
	set
	{
		name = value.Length > 50 ? value[..50] : value;
	}
}

public string? Description
{
	get { return description; }
	set
	{
		if (value == null)
		{
			description = string.Empty;
		}
		else
		{
			description = value.Length > 250 ? value[..250] : value;

		}
	}
}


-------------------------------------------------------------------------------------



public void UseProduct(int items)
{
	if (items <= AmountInStock)
	{
		//use the items
		AmountInStock -= items;

		UpdateLowStock();

		Log($"Amount in stock updated. Now {AmountInStock} items in stock.");
	}
	else
	{
		Log($"Not enough items on stock for {CreateSimpleProductRepresentation()}. {AmountInStock} available but {items} requested.");
	}
}

public void IncreaseStock()
{
	AmountInStock++;
}

private void DecreaseStock(int items, string reason)
{
	if (items <= AmountInStock)
	{
		//decrease the stock with the specified number items
		AmountInStock -= items;
	}
	else
	{
		AmountInStock = 0;
	}

	UpdateLowStock();

	Log(reason);
}

public string DisplayDetailsShort()
{
	return $"{Id}. {Name} \n{AmountInStock} items in stock";
}

public string DisplayDetailsFull()
{
	StringBuilder sb = new();
	sb.Append($"{Id} {Name} \n{Description}\n{AmountInStock} item(s) in stock");

	if (IsBelowStockThreshold)
	{
		sb.Append("\n!!STOCK LOW!!");
	}

	return sb.ToString();

}

private void UpdateLowStock()
{
	if (AmountInStock < 10)//for now a fixed value
	{
		IsBelowStockThreshold = true;
	}
}

private void Log(string message)
{
	//this could be written to a file
	Console.WriteLine(message);
}

private string CreateSimpleProductRepresentation()
{
	return $"Product {Id} ({Name})";
}


-------------------------------------------------------------------------------------


public void IncreaseStock(int amount)
{
	int newStock = AmountInStock + amount;

	if (newStock <= maxItemsInStock)
	{
		AmountInStock += amount;
	}
	else
	{
		AmountInStock = maxItemsInStock;//we only store the possible items, overstock isn't stored
		Log($"{CreateSimpleProductRepresentation} stock overflow. {newStock - AmountInStock} item(s) ordered that couldn't be stored.");
	}

	if (AmountInStock > 10)
	{
		IsBelowStockThreshold = false;
	}
}


-------------------------------------------------------------------------------------



public string DisplayDetailsFull(string extraDetails)
{
	StringBuilder sb = new StringBuilder();

	sb.Append($"{Id} {Name} \n{Description}\n{AmountInStock} item(s) in stock");

	sb.Append(extraDetails);

	if (IsBelowStockThreshold)
	{
		sb.Append("\n!!STOCK LOW!!");
	}

	return sb.ToString();
}


-------------------------------------------------------------------------------------


public enum Currency
{
	Dollar,
	Euro,
	Pound
}


-------------------------------------------------------------------------------------


OrderItem class

public int Id { get; set; }
public int ProductId { get; set; }
public string ProductName { get; set; } = string.Empty;
public int AmountOrdered { get; set; }

public override string ToString()
{
	return $"Product ID: {ProductId} - Name: {ProductName} - Amount ordered: {AmountOrdered}";
}



Order class

public Order()
{
	Id = new Random().Next(9999999);

	int numberofSeconds = new Random().Next(100);
	OrderFulfilmentDate = DateTime.Now.AddSeconds(numberofSeconds);

	OrderItems = new List<OrderItem>();
}
